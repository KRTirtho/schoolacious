-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE OR REPLACE FUNCTION public.update_owner_school()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF SECURITY DEFINER
AS $BODY$
begin
  -- creating the initial admin role for that 
  -- newly  created institution
  INSERT INTO roles("name",description,permissions,owner_id,scoped_grade_id,scoped_section_id,scoped_class_id)
  VALUES (
    'admin',
    'Has all permissions',
    '{"school:modify", "grade:create", "grade:modify", "grade:delete", "section:create", "section:modify", "section:delete", "class:create", "class:modify", "class:delete"}',
    new.id,
    NULL,
    NULL,
    NULL
    );

  -- updating the school owner with required roles
  -- and fields
  UPDATE public."user"
    SET school_id = new.id, role_id = sub.id
    FROM (
      SELECT id FROM roles 
        WHERE owner_id = new.id
        AND name = 'admin'
      ) AS sub
    WHERE "user".id = new.owner_id;
  return new;
end
$BODY$;

ALTER FUNCTION public.update_owner_school()
    OWNER TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.update_owner_school() TO anon;

GRANT EXECUTE ON FUNCTION public.update_owner_school() TO postgres;

GRANT EXECUTE ON FUNCTION public.update_owner_school() TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.update_owner_school() TO authenticated;

GRANT EXECUTE ON FUNCTION public.update_owner_school() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.update_owner_school() TO service_role;

REVOKE ALL ON TABLE public.invitation FROM anon;
REVOKE ALL ON TABLE public.invitation FROM authenticated;
REVOKE ALL ON TABLE public.invitation FROM postgres;
REVOKE ALL ON TABLE public.invitation FROM service_role;
REVOKE ALL ON TABLE public.invitation FROM supabase_admin;
GRANT ALL ON TABLE public.invitation TO anon;

GRANT ALL ON TABLE public.invitation TO authenticated;

GRANT ALL ON TABLE public.invitation TO postgres;

GRANT ALL ON TABLE public.invitation TO service_role;

GRANT ALL ON TABLE public.invitation TO supabase_admin;

REVOKE ALL ON TABLE public.weld FROM anon;
REVOKE ALL ON TABLE public.weld FROM authenticated;
REVOKE ALL ON TABLE public.weld FROM postgres;
REVOKE ALL ON TABLE public.weld FROM service_role;
REVOKE ALL ON TABLE public.weld FROM supabase_admin;
GRANT ALL ON TABLE public.weld TO anon;

GRANT ALL ON TABLE public.weld TO authenticated;

GRANT ALL ON TABLE public.weld TO postgres;

GRANT ALL ON TABLE public.weld TO service_role;

GRANT ALL ON TABLE public.weld TO supabase_admin;

COMMENT ON TABLE public.roles
  IS 'Contains the custom roles with various "allowed" permissions created by the owner';

REVOKE ALL ON TABLE public.roles FROM anon;
REVOKE ALL ON TABLE public.roles FROM authenticated;
REVOKE ALL ON TABLE public.roles FROM postgres;
REVOKE ALL ON TABLE public.roles FROM service_role;
REVOKE ALL ON TABLE public.roles FROM supabase_admin;
GRANT ALL ON TABLE public.roles TO anon;

GRANT ALL ON TABLE public.roles TO authenticated;

GRANT ALL ON TABLE public.roles TO postgres;

GRANT ALL ON TABLE public.roles TO service_role;

GRANT ALL ON TABLE public.roles TO supabase_admin;

CREATE TRIGGER update_school_creator AFTER INSERT ON school
  FOR EACH ROW EXECUTE PROCEDURE update_owner_school();