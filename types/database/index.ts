/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/grade": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.grade.id"];
          standard?: parameters["rowFilter.grade.standard"];
          created_at?: parameters["rowFilter.grade.created_at"];
          updated_at?: parameters["rowFilter.grade.updated_at"];
          owner_id?: parameters["rowFilter.grade.owner_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["grade"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** grade */
          grade?: definitions["grade"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.grade.id"];
          standard?: parameters["rowFilter.grade.standard"];
          created_at?: parameters["rowFilter.grade.created_at"];
          updated_at?: parameters["rowFilter.grade.updated_at"];
          owner_id?: parameters["rowFilter.grade.owner_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.grade.id"];
          standard?: parameters["rowFilter.grade.standard"];
          created_at?: parameters["rowFilter.grade.created_at"];
          updated_at?: parameters["rowFilter.grade.updated_at"];
          owner_id?: parameters["rowFilter.grade.owner_id"];
        };
        body: {
          /** grade */
          grade?: definitions["grade"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/invitation": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.invitation.id"];
          created_at?: parameters["rowFilter.invitation.created_at"];
          updated_at?: parameters["rowFilter.invitation.updated_at"];
          role_id?: parameters["rowFilter.invitation.role_id"];
          owner_id?: parameters["rowFilter.invitation.owner_id"];
          receiver_id?: parameters["rowFilter.invitation.receiver_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["invitation"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** invitation */
          invitation?: definitions["invitation"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.invitation.id"];
          created_at?: parameters["rowFilter.invitation.created_at"];
          updated_at?: parameters["rowFilter.invitation.updated_at"];
          role_id?: parameters["rowFilter.invitation.role_id"];
          owner_id?: parameters["rowFilter.invitation.owner_id"];
          receiver_id?: parameters["rowFilter.invitation.receiver_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.invitation.id"];
          created_at?: parameters["rowFilter.invitation.created_at"];
          updated_at?: parameters["rowFilter.invitation.updated_at"];
          role_id?: parameters["rowFilter.invitation.role_id"];
          owner_id?: parameters["rowFilter.invitation.owner_id"];
          receiver_id?: parameters["rowFilter.invitation.receiver_id"];
        };
        body: {
          /** invitation */
          invitation?: definitions["invitation"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/roles": {
    /** "allowed" permissions created by the owner */
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.roles.id"];
          created_at?: parameters["rowFilter.roles.created_at"];
          updated_at?: parameters["rowFilter.roles.updated_at"];
          owner_id?: parameters["rowFilter.roles.owner_id"];
          name?: parameters["rowFilter.roles.name"];
          description?: parameters["rowFilter.roles.description"];
          permissions?: parameters["rowFilter.roles.permissions"];
          scoped_grade_id?: parameters["rowFilter.roles.scoped_grade_id"];
          scoped_section_id?: parameters["rowFilter.roles.scoped_section_id"];
          scoped_class_id?: parameters["rowFilter.roles.scoped_class_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["roles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    /** "allowed" permissions created by the owner */
    post: {
      parameters: {
        body: {
          /** roles */
          roles?: definitions["roles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    /** "allowed" permissions created by the owner */
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.roles.id"];
          created_at?: parameters["rowFilter.roles.created_at"];
          updated_at?: parameters["rowFilter.roles.updated_at"];
          owner_id?: parameters["rowFilter.roles.owner_id"];
          name?: parameters["rowFilter.roles.name"];
          description?: parameters["rowFilter.roles.description"];
          permissions?: parameters["rowFilter.roles.permissions"];
          scoped_grade_id?: parameters["rowFilter.roles.scoped_grade_id"];
          scoped_section_id?: parameters["rowFilter.roles.scoped_section_id"];
          scoped_class_id?: parameters["rowFilter.roles.scoped_class_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    /** "allowed" permissions created by the owner */
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.roles.id"];
          created_at?: parameters["rowFilter.roles.created_at"];
          updated_at?: parameters["rowFilter.roles.updated_at"];
          owner_id?: parameters["rowFilter.roles.owner_id"];
          name?: parameters["rowFilter.roles.name"];
          description?: parameters["rowFilter.roles.description"];
          permissions?: parameters["rowFilter.roles.permissions"];
          scoped_grade_id?: parameters["rowFilter.roles.scoped_grade_id"];
          scoped_section_id?: parameters["rowFilter.roles.scoped_section_id"];
          scoped_class_id?: parameters["rowFilter.roles.scoped_class_id"];
        };
        body: {
          /** roles */
          roles?: definitions["roles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/school": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.school.id"];
          created_at?: parameters["rowFilter.school.created_at"];
          updated_at?: parameters["rowFilter.school.updated_at"];
          name?: parameters["rowFilter.school.name"];
          short_name?: parameters["rowFilter.school.short_name"];
          email?: parameters["rowFilter.school.email"];
          phone?: parameters["rowFilter.school.phone"];
          description?: parameters["rowFilter.school.description"];
          owner_id?: parameters["rowFilter.school.owner_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["school"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** school */
          school?: definitions["school"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.school.id"];
          created_at?: parameters["rowFilter.school.created_at"];
          updated_at?: parameters["rowFilter.school.updated_at"];
          name?: parameters["rowFilter.school.name"];
          short_name?: parameters["rowFilter.school.short_name"];
          email?: parameters["rowFilter.school.email"];
          phone?: parameters["rowFilter.school.phone"];
          description?: parameters["rowFilter.school.description"];
          owner_id?: parameters["rowFilter.school.owner_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.school.id"];
          created_at?: parameters["rowFilter.school.created_at"];
          updated_at?: parameters["rowFilter.school.updated_at"];
          name?: parameters["rowFilter.school.name"];
          short_name?: parameters["rowFilter.school.short_name"];
          email?: parameters["rowFilter.school.email"];
          phone?: parameters["rowFilter.school.phone"];
          description?: parameters["rowFilter.school.description"];
          owner_id?: parameters["rowFilter.school.owner_id"];
        };
        body: {
          /** school */
          school?: definitions["school"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/subject": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.subject.id"];
          name?: parameters["rowFilter.subject.name"];
          created_at?: parameters["rowFilter.subject.created_at"];
          updated_at?: parameters["rowFilter.subject.updated_at"];
          owner_id?: parameters["rowFilter.subject.owner_id"];
          description?: parameters["rowFilter.subject.description"];
          marks?: parameters["rowFilter.subject.marks"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["subject"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** subject */
          subject?: definitions["subject"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.subject.id"];
          name?: parameters["rowFilter.subject.name"];
          created_at?: parameters["rowFilter.subject.created_at"];
          updated_at?: parameters["rowFilter.subject.updated_at"];
          owner_id?: parameters["rowFilter.subject.owner_id"];
          description?: parameters["rowFilter.subject.description"];
          marks?: parameters["rowFilter.subject.marks"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.subject.id"];
          name?: parameters["rowFilter.subject.name"];
          created_at?: parameters["rowFilter.subject.created_at"];
          updated_at?: parameters["rowFilter.subject.updated_at"];
          owner_id?: parameters["rowFilter.subject.owner_id"];
          description?: parameters["rowFilter.subject.description"];
          marks?: parameters["rowFilter.subject.marks"];
        };
        body: {
          /** subject */
          subject?: definitions["subject"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user.id"];
          created_at?: parameters["rowFilter.user.created_at"];
          firstname?: parameters["rowFilter.user.firstname"];
          lastname?: parameters["rowFilter.user.lastname"];
          role_id?: parameters["rowFilter.user.role_id"];
          /** The instituion the user currently in */
          school_id?: parameters["rowFilter.user.school_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user */
          user?: definitions["user"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user.id"];
          created_at?: parameters["rowFilter.user.created_at"];
          firstname?: parameters["rowFilter.user.firstname"];
          lastname?: parameters["rowFilter.user.lastname"];
          role_id?: parameters["rowFilter.user.role_id"];
          /** The instituion the user currently in */
          school_id?: parameters["rowFilter.user.school_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user.id"];
          created_at?: parameters["rowFilter.user.created_at"];
          firstname?: parameters["rowFilter.user.firstname"];
          lastname?: parameters["rowFilter.user.lastname"];
          role_id?: parameters["rowFilter.user.role_id"];
          /** The instituion the user currently in */
          school_id?: parameters["rowFilter.user.school_id"];
        };
        body: {
          /** user */
          user?: definitions["user"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/weld": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.weld.id"];
          created_at?: parameters["rowFilter.weld.created_at"];
          updated_at?: parameters["rowFilter.weld.updated_at"];
          role_id?: parameters["rowFilter.weld.role_id"];
          owner_id?: parameters["rowFilter.weld.owner_id"];
          receiver_id?: parameters["rowFilter.weld.receiver_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["weld"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** weld */
          weld?: definitions["weld"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.weld.id"];
          created_at?: parameters["rowFilter.weld.created_at"];
          updated_at?: parameters["rowFilter.weld.updated_at"];
          role_id?: parameters["rowFilter.weld.role_id"];
          owner_id?: parameters["rowFilter.weld.owner_id"];
          receiver_id?: parameters["rowFilter.weld.receiver_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.weld.id"];
          created_at?: parameters["rowFilter.weld.created_at"];
          updated_at?: parameters["rowFilter.weld.updated_at"];
          role_id?: parameters["rowFilter.weld.role_id"];
          owner_id?: parameters["rowFilter.weld.owner_id"];
          receiver_id?: parameters["rowFilter.weld.receiver_id"];
        };
        body: {
          /** weld */
          weld?: definitions["weld"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  grade: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: integer */
    standard: number;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `school.id`.<fk table='school' column='id'/>
     */
    owner_id?: string;
  };
  /** @description Stores school sent invitation(s) to outsiders */
  invitation: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    updated_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `roles.id`.<fk table='roles' column='id'/>
     */
    role_id?: string;
    /** Format: uuid */
    owner_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `school.id`.<fk table='school' column='id'/>
     */
    receiver_id?: string;
  };
  /**
   * @description Contains the custom roles with various
   * "allowed" permissions created by the owner
   */
  roles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    updated_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `school.id`.<fk table='school' column='id'/>
     */
    owner_id: string;
    /** Format: character varying */
    name: string;
    /** Format: text */
    description?: string;
    /** Format: ARRAY */
    permissions: string[];
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `grade.id`.<fk table='grade' column='id'/>
     */
    scoped_grade_id?: string;
    /** Format: uuid */
    scoped_section_id?: string;
    /** Format: uuid */
    scoped_class_id?: string;
  };
  /** @description Stores important metadata for each new institution */
  school: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    updated_at: string;
    /** Format: text */
    name: string;
    /** Format: character varying */
    short_name: string;
    /** Format: character varying */
    email: string;
    /** Format: character varying */
    phone: string;
    /** Format: text */
    description?: string;
    /** Format: uuid */
    owner_id?: string;
  };
  subject: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    updated_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `grade.id`.<fk table='grade' column='id'/>
     */
    owner_id: string;
    /** Format: text */
    description?: string;
    /**
     * Format: integer
     * @default 100
     */
    marks?: number;
  };
  user: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: character varying */
    firstname: string;
    /** Format: character varying */
    lastname: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `roles.id`.<fk table='roles' column='id'/>
     */
    role_id?: string;
    /**
     * Format: uuid
     * @description The instituion the user currently in
     *
     * Note:
     * This is a Foreign Key to `school.id`.<fk table='school' column='id'/>
     */
    school_id?: string;
  };
  /** @description Stores outsider sent join request(s) to various schools */
  weld: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    updated_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `roles.id`.<fk table='roles' column='id'/>
     */
    role_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `school.id`.<fk table='school' column='id'/>
     */
    owner_id?: string;
    /** Format: uuid */
    receiver_id?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description grade */
  "body.grade": definitions["grade"];
  /** Format: uuid */
  "rowFilter.grade.id": string;
  /** Format: integer */
  "rowFilter.grade.standard": string;
  /** Format: timestamp with time zone */
  "rowFilter.grade.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.grade.updated_at": string;
  /** Format: uuid */
  "rowFilter.grade.owner_id": string;
  /** @description invitation */
  "body.invitation": definitions["invitation"];
  /** Format: uuid */
  "rowFilter.invitation.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.invitation.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.invitation.updated_at": string;
  /** Format: uuid */
  "rowFilter.invitation.role_id": string;
  /** Format: uuid */
  "rowFilter.invitation.owner_id": string;
  /** Format: uuid */
  "rowFilter.invitation.receiver_id": string;
  /** @description roles */
  "body.roles": definitions["roles"];
  /** Format: uuid */
  "rowFilter.roles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.roles.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.roles.updated_at": string;
  /** Format: uuid */
  "rowFilter.roles.owner_id": string;
  /** Format: character varying */
  "rowFilter.roles.name": string;
  /** Format: text */
  "rowFilter.roles.description": string;
  /** Format: ARRAY */
  "rowFilter.roles.permissions": string;
  /** Format: uuid */
  "rowFilter.roles.scoped_grade_id": string;
  /** Format: uuid */
  "rowFilter.roles.scoped_section_id": string;
  /** Format: uuid */
  "rowFilter.roles.scoped_class_id": string;
  /** @description school */
  "body.school": definitions["school"];
  /** Format: uuid */
  "rowFilter.school.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.school.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.school.updated_at": string;
  /** Format: text */
  "rowFilter.school.name": string;
  /** Format: character varying */
  "rowFilter.school.short_name": string;
  /** Format: character varying */
  "rowFilter.school.email": string;
  /** Format: character varying */
  "rowFilter.school.phone": string;
  /** Format: text */
  "rowFilter.school.description": string;
  /** Format: uuid */
  "rowFilter.school.owner_id": string;
  /** @description subject */
  "body.subject": definitions["subject"];
  /** Format: uuid */
  "rowFilter.subject.id": string;
  /** Format: character varying */
  "rowFilter.subject.name": string;
  /** Format: timestamp with time zone */
  "rowFilter.subject.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.subject.updated_at": string;
  /** Format: uuid */
  "rowFilter.subject.owner_id": string;
  /** Format: text */
  "rowFilter.subject.description": string;
  /** Format: integer */
  "rowFilter.subject.marks": string;
  /** @description user */
  "body.user": definitions["user"];
  /** Format: uuid */
  "rowFilter.user.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.user.created_at": string;
  /** Format: character varying */
  "rowFilter.user.firstname": string;
  /** Format: character varying */
  "rowFilter.user.lastname": string;
  /** Format: uuid */
  "rowFilter.user.role_id": string;
  /**
   * Format: uuid
   * @description The instituion the user currently in
   */
  "rowFilter.user.school_id": string;
  /** @description weld */
  "body.weld": definitions["weld"];
  /** Format: uuid */
  "rowFilter.weld.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.weld.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.weld.updated_at": string;
  /** Format: uuid */
  "rowFilter.weld.role_id": string;
  /** Format: uuid */
  "rowFilter.weld.owner_id": string;
  /** Format: uuid */
  "rowFilter.weld.receiver_id": string;
}

export interface operations {}

export interface external {}
